public class Main extends Application {
    int grid[][];

    @Override
    public void start(Stage primaryStage) throws Exception {
        grid = new int[9][9];
        int[][] array = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
        		 {5, 2, 0, 0, 0, 0, 0, 0, 0},
        		 {0, 8, 7, 0, 0, 0, 0, 3, 1},
        		 {0, 0, 3, 0, 1, 0, 0, 8, 0},
        		 {9, 0, 0, 8, 6, 3, 0, 0, 5},
        		 {0, 5, 0, 0, 9, 0, 6, 0, 0},
        		 {1, 3, 0, 0, 0, 0, 2, 5, 0},
        		 {0, 0, 0, 0, 0, 0, 0, 7, 4},
        		 {0, 0, 5, 2, 0, 6, 3, 0, 0}};

        initializeGrid(array);
	      boolean solved = tryNextMove(0, grid); 
	
	        if (solved) {
	            System.out.println("Sudoku solved:");
	            printGrid();
	        } else {
	            System.out.println("No solution exists.");
	        }



        primaryStage.setTitle("Sudoku Backtracking");
        primaryStage.show();
    }
    
    public static boolean tryNextMove(int index, int[][] grid) {
        if (index == 81) {
            return true; 
        }

        int row = getRow(index);
        int col = getColumn(index);

        if (grid[row][col] != 0) {
            return tryNextMove(index + 1, grid);
        }

        for (int num = 1; num <= 9; num++) {
            if (isValidPlacement(row, col, num, grid)) {
                grid[row][col] = num; 
                if (tryNextMove(index + 1, grid)) {
                    return true; 
                }
                grid[row][col] = 0; 
            }
        }

        return false; 
    }

    
    public void printGrid() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(grid[i][j] + " ");
                if ((j + 1) % 3 == 0 && j != 8) {
                    System.out.print("| ");
                }
            }
            System.out.println();
            if ((i + 1) % 3 == 0 && i != 8) {
                System.out.println("------+-------+------");
            }
        }
    }
    public void initializeGrid(int input[][]) {
    	
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (input[i][j] != 0) {
                    grid[i][j] = input[i][j];
                }
            }
        }
    }
    
    public static int getRow(int index) {
        return index / 9; 
    }
    public static int getColumn(int index) {
        return index % 9;
    }
    public static int getIndex(int index, int grid[][]) {
    	return grid[getRow(index)][getColumn(index)];
    }
    public static boolean isValidPlacement(int row, int col, int n, int[][] grid) {
        if (!validNumber(n)) {
            return false;
        }
        if (!isValidRow(row, n, grid)) {
            return false;
        }
        if (!isValidColumn(col, n, grid)) {
            return false;
        }
        if (!isValidSubgrid(row, col, n, grid)) {
            return false;
        }
        return true;
    }
    public static boolean validNumber(int n) {
        if (n < 1 || n > 9) return false;
        return true;
    }
    public static boolean isValidSubgrid(int row, int col, int n, int[][] grid) {
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[startRow + i][startCol + j] == n) {
                    return false;
                }
            }
        }
        return true;
    }
    public static boolean isValidRow(int row, int n, int grid[][]) {
        for (int col = 0; col < 9; col++) {
            if (grid[row][col] == n) {
                return false;
            }
        }
        return true;
    }

   public static boolean isValidColumn(int col, int n, int grid[][]) {
        for (int row = 0; row < 9; row++) {
            if (grid[row][col] == n) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
